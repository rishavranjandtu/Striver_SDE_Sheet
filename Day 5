Delete n node from end


class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode*fast=head;
        ListNode*slow=head;
        
        
        for(int i=0;i<n;i++)
        {
            fast=fast->next;
        }
        
        if(fast==NULL) 
        {
            ListNode*tmp=head;
            head=head->next;
            delete tmp;
            return head;
        }
        while(fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next;
        }
        
        ListNode*tmp=slow->next;
        slow->next=tmp->next;
        delete tmp;
        tmp=NULL;
        return head;
    }
};


Add sum///////

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        /*
        ListNode*a=new ListNode();
        ListNode*b=a;
        int carry=0;
        while(l1!=NULL||l2!=NULL)
        {
            ListNode*n=new ListNode();
            if(l1==NULL)
            {
                n->val=l2->val+carry;
                if(n->val>=10)
                {
                    n->val=n->val-10;
                    carry=1;
                }
                else
                {
                    carry=0;
                }
                l2=l2->next;
            }
            else if(l2==NULL)
            {
                n->val=l1->val+carry;
                if(n->val>=10)
                {
                    n->val=n->val-10;
                    carry=1;
                }
                else
                {
                    carry=0;
                }
                l1=l1->next;
            }
            else
            {
                n->val=l1->val+l2->val+carry;
                if(n->val>=10)
                {
                    n->val=n->val-10;
                    carry=1;
                }
                else
                {
                    carry=0;
                }
                l1=l1->next;
                l2=l2->next;
            }
            a->next=n;
            a=n;
            if(l1==NULL&&l2==NULL&&carry==1)
            {
                ListNode*tmp=new ListNode();
                tmp->val=carry;
                a->next=tmp;
                a=tmp;
            }
        }
        return b->next;
        */
        
        
        
        
        merge 2 ll
        
        class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        
        if(list1==NULL) return list2;
        
        if(list2==NULL) return list1;
        
        ListNode*n=new ListNode(0);
        if(list1->val<=list2->val)
        {
            n->val=list1->val;
            n->next=mergeTwoLists(list1->next,list2);
        }
        else
        {
             n->val=list2->val;
             n->next=mergeTwoLists(list1,list2->next);
        }
        return n;
            
    }
};


delete a node

class Solution {
public:
    void deleteNode(ListNode* node) {
        
        ListNode*tmp=node->next;
        node->val=tmp->val;
        node->next=tmp->next;
        delete tmp;
        tmp=NULL;
    }
};



middle of ll

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode*slow=head;
        ListNode*fast=head;
        
        while(fast!=NULL&&fast->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;
    }
};
        
        //////////////better approach///////
        
        ListNode*dummy=new ListNode(0);
        ListNode*tmp=dummy;
        int carry=0;
        while(l1!=NULL||l2!=NULL||carry==1)
        {
            int sum=0;
            if(l1!=NULL)
            {
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL)
            {
                sum+=l2->val;
                l2=l2->next;
            }
            
            sum+=carry;
            carry=sum/10;
            sum=sum%10;
            ListNode*n=new ListNode(sum);
            tmp->next=n;
            tmp=tmp->next;
        }
        return dummy->next;
    }
};
