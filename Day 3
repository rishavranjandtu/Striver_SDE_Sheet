merger 2 array

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       
        //////////O(m+n)////
        int i=m-1;
        int j=n-1;
        int k=m+n-1;
        
        while(i>=0&&j>=0)
        {
            if(nums1[i]<nums2[j]){
                nums1[k--]=nums2[j--];
              }
            else{
                nums1[k--]=nums1[i--];
              }
        }
        
        while(i>=0)
        {
            nums1[k--]=nums1[i--];
        }
        
        while(j>=0)
        {
            nums1[k--]=nums2[j--];
        }
    }
};

search in 2d matrix

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        /*
        int n=matrix.size();
        int m=matrix[0].size();
        for(int i=0;i<n;i++)
        {
            if(target>=matrix[i][0]&&target<=matrix[i][m-1])
            {
                for(int j=0;j<matrix[i].size();j++)
                {
                    if(matrix[i][j]==target) return true;
                }
            }
        }
        return false;
        */
        
        //////////O(n) //  using bst concept/////////
        int row=0;
        int col=matrix[0].size()-1;
        
        while(row<=matrix.size()-1&&col>=0)
        {
        if(matrix[row][col]==target) return true;
        else if(target<matrix[row][col]) col--;
        else row++;
        }
        return false;
    }
};

majority element-2

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int> m;
        vector<int>v;
        for(int i=0;i<n;i++)
        {
               m[nums[i]]++;
        }
        
        for(auto x:m)
        {
            if(x.second>n/3) v.push_back(x.first);
        }
        return v;
    }
};

majority element-1

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        ////O(log n)////////
       /* sort(nums.begin(),nums.end());
        return nums[nums.size()/2];*/
        
        ////////O(n)////////////
       int count=0;
        int majority=0;
        for(int i=0;i<nums.size();i++)
        {
            if(count==0) majority=nums[i];
            if(majority==nums[i]) count++;
            else count--;
        }
        return majority;
        
    }
};

