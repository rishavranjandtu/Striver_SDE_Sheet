majority elemement 2
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int majority1=-1;
        int majority2=-1;
        int count1=0;
        int count2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==majority1)  count1++;
            
            else if(nums[i]==majority2)  count2++;
            
            else if(count1==0)
            {
                majority1=nums[i];
                count1++;
            }
            else if(count2==0)
            {
                majority2=nums[i];
                count2++;
            }
            else
            {
                count1--;
                count2--;
            }
        }
        
        vector<int> ans;
        int c1=0;
        int c2=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==majority1) c1++;
            else if(nums[i]==majority2) c2++;
        }
        if(c1>nums.size()/3) ans.push_back(majority1);
        if(c2>nums.size()/3) ans.push_back(majority2);
        return ans;
    }
};


merge intervals

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>v;
        
        if(intervals.size()<=1) return intervals;
        sort(intervals.begin(),intervals.end());
        v.push_back(intervals[0]);
        
        for(int i=1;i<intervals.size();i++)
        {
            if(intervals[i][0]<=v.back()[1])
            {
                int end=max(intervals[i][1],v.back()[1]);
                
                v.back()[1]=end;
            }
            else
            {
                v.push_back(intervals[i]);
            }
        }
        return v;
    }
};

two sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int,int> m;
        for(int i=0;i<nums.size();i++)
        {
            if(m.find(target-nums[i])!=m.end())
            {
                ans.push_back(m[target-nums[i]]);
                ans.push_back(i);
                return ans;
            }
            
            else
                m[nums[i]]=i;
        }
        return ans;
    }
};
