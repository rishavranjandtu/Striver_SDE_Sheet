Question 4- sort colors
class Solution {
public:
   //////////////////////////////////////////////////
    //O(N^2)
    void sortColors(vector<int>& nums) {
       /* for(int i=0;i<nums.size();i++)
        {
            for(int j=0;j<nums.size()-1-i;j++)
            {
                if(nums[j+1]<nums[j])
                {
                    swap(nums[j],nums[j+1]);
                }
            }
        }*/
        /////////////////////////////////////////////
        //O(2N)
       
        /*vector<int> v(3,0);
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0) v[0]++;
            else if(nums[i]==1) v[1]++;
            else v[2]++;
        }
        
        for(int i=0;i<n;i++)
        {
            if(i<v[0]) {nums[i]=0;}
            else if(v[0]<=i&&i<v[1]+v[0]){nums[i]=1;}
            else{ nums[i]=2;}
        }
        */
        
        /////////////////////////////////////////////
        //O(N)
        
        int low=0;
        int mid=0;
        int high=nums.size()-1;
        while(mid<=high)
        {
            switch(nums[mid])
            {
                case 0: swap(nums[low],nums[mid]);
                    low++; mid++;
                    break;
                    
                case 1: mid++; break;
                
                case 2: swap(nums[mid],nums[high]);
                         high--;      
            }
        }
        
    }
};

QUESTION-5 -BUY STOCK-1

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minn=INT_MAX;
        int price=0;
        for(int i=0;i<prices.size();i++)
        {
           minn=min(minn,prices[i]);
            price=max(price,prices[i]-minn);
        }
        return price;
    }
};

QUESTION 6- BUY STOCK-2

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int sum=0;
        int maxx=0;
        for(int i=1;i<prices.size();i++)
        {
            sum=prices[i]-prices[i-1];
            if(sum>0) maxx+=sum;
        }
        return maxx;
    }
};

QUESTION 7- ROTATE MATRIX

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<i;j++)
            {
                
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[i].size();j++)
            {
                if(j<matrix.size()/2)
                {
                swap(matrix[i][j],matrix[i][matrix.size()-1-j]);
                }
            }
        }
        
        
    }
};


QUESTION 8-- NEXT PERMUTATION

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int breakpoint=-1;
        int next_no;
        int n=nums.size();
        
        for(int i=n-1;i>=1;i--){
            if(nums[i]>nums[i-1]){
                 breakpoint=i-1;
                 break;}}
        
        if(breakpoint!=-1){
            for(int j=n-1;j>=0;j--) {
                if(nums[j]>nums[breakpoint]){
                    next_no=j;
                    break;}}
           
            swap(nums[breakpoint],nums[next_no]);
            reverse(nums.begin()+breakpoint+1,nums.end());}
        
        else{
            reverse(nums.begin(),nums.end());}
        
        ////////////////////////////
        //inbuilt function
        /*
        next_permutation(nums.begin(),nums.end());
        */
    }
};

QUESTION 9- FIND DUPLICATE

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       /*/////////////////////////////
                   //O(N) space//
        /////////////////////////////
       
       unordered_map<int,int> m;
        int maxx=0;
        int no;
        for(int i=0;i<nums.size();i++)
        {
            m[nums[i]]++;
            if(m[nums[i]]>maxx){ maxx=m[nums[i]]; no=nums[i];}
        }
        return no;
        */
        
        //////////////////////////////////
                     //O(1) space///
        //////////////////////////////////
        
        int slow=nums[0];
        int fast=nums[0];
        do
        {
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
        
    }
};
